'=========================================================================
'             (C) COPYRIGHT AMADEUS GLOBAL TRAVEL DISTRIBUTION 2019
'
' TEST CASE NAME: office retriever 0_ concealed
' PRODUCT: todo
'
' TEST CASE: 
'   TESTED REQUIREMENT: CR18043673/APx_concealement
'   PREREQUISITE:
'      PNR  (1pax 1segment + APE, APN, APM)
'      
'
'   DESCRIPTION:
'      Goal of this test is to validate that the APx elements are concealed for offices retriever 0 and 1 (airlines) and visible for the others
'   EXPECTATIONS:
'      APx concealed for offices retriever 0 and 1
'      APx visible for offices retrievers 2 to 9
'
'
' TEST PLAN: CR18043673
' 
' -DESIGN steps:
' 1. Sign in 1A office to create the associated FFN profile (with APN/6X)
' 2. Sign out
' 3. Sign in TA test office creator: NCE6X31RP
' 4. Create a PNR with 1pax 1seg + APE, APM, APN via FF profile
' 5. Sign out
' 6. Sign in 6X airline test office retriever: SYD6X0102
' 7. Retrieve => Check APX are concealed excepted APN for 6X airline retriver
' 8. Sign out
'
'=========================================================================
'initialize - execute (the root and the data file)
''Initialize:
import json
from lib.openpnr import extract_binary_payload
from lib.json_match import assert_equal, assert_found, assert_not_found, parse_json

execfile(global_regression.TTS_RootDir + '/data/data_' + global_regression.TEST_SYSTEM + '.py')

TTS_OK = TTServer.currentMessage.TTS_MATCH_COMPARISON_OK
TTS_KO = TTServer.currentMessage.TTS_MATCH_COMPARISON_FAILURE

# As the specific conditions to evaluate depend on the test, the comparison function is in the individual script
# In case of match error, find the error details in TTS logs (not available in .log or in .rex file)
# Variables defined in data files (e.g., test user data) or in the current scripts (e.g., recloc)
# are directly available from inside the function.
def validate_openpnr(openpnr_json):
    try:
        openpnr = parse_json(openpnr_json)
        for field in ['id', 'reference', 'creation', 'contacts', 'travelers', 'products']:
            assert_found(field, container=openpnr)
        
        expected_openpnr_id = recloc + '-' + today
        assert_equal(actual=openpnr['id'], expected=expected_openpnr_id, item_name='OpenPNR id field')
        assert_not_found('creation/date', container=openpnr)
        assert_found('creation/dateTime', container=openpnr)
        assert_found('creation/pointOfSale/office/id', container=openpnr)
        assert_equal(expected=DEFAULT_OFFICE2, actual=openpnr['creation']['pointOfSale']['office']['id'], item_name='creator office')

        #Check data for contacts section
        assert_equal(actual=len(openpnr['contacts']), expected=3, item_name='number of contacts')
        contacts_1 = openpnr['contacts'][0]
        contacts_2 = openpnr['contacts'][1]
        contacts_3 = openpnr['contacts'][2]
   
        #Check data for AP element
        assert_equal(actual=contacts_1['type'], expected="contact", item_name='contact1 type')
        assert_equal(actual=contacts_1['id'], expected= recloc+"-"+today+"-PNR-AP-4", item_name='contact1 id')
        assert_equal(actual=contacts_1['purpose'], expected= [u'STANDARD'], item_name='contact1 purpose')
        assert_equal(actual=contacts_1['phone']['number'], expected= "EOS", item_name='contact1 phone/number')
        #Check data for API element
        assert_equal(actual=contacts_2['type'], expected="contact", item_name='contact2 type')
        assert_equal(actual=contacts_2['id'], expected= recloc+"-"+today+"-PNR-AP-7", item_name='contact2 id')
        assert_equal(actual=contacts_2['phone']['number'], expected= "THIS INFO LINE SHOULD BE VISIBLE IN OPENPNR", item_name='contact2 phone/number')
        assert_equal(actual=contacts_2['purpose'], expected= [u'INFORMATION'], item_name='contact2 purpose')
        assert_equal(actual=contacts_2['freeFlowFormat'], expected= "THIS INFO LINE SHOULD BE VISIBLE IN OPENPNR", item_name='contact2 purpose')
        #Check data for APN element
        assert_equal(actual=contacts_3['type'], expected="contact", item_name='contact3 type')
        assert_equal(actual=contacts_3['id'], expected= recloc+"-"+today+"-PNR-AP-9", item_name='contact3 id')
        assert_equal(actual=contacts_3['purpose'], expected= [u'NOTIFICATION'], item_name='contact3 purpose')
        assert_equal(actual=contacts_3['phone']['number'], expected= "6X/" + SMS, item_name='contact3 phone/number')  
    
    except Exception as e:
        print('OpenPNR validation failed: {}'.format(e))
        return TTS_KO
    
    print('OpenPNR validation successful')
    return TTS_OK

''End

IG
JO
JD

'========================================================================
'> 1.Sign in the test office NCE1A0955 to create a FF profile
'========================================================================
OK-WE/L-%ATID%
OK-WY/C-C5AGY/W-AMAD/S-80X22/O-%DEFAULT_OFFICE2%/T-NCE/A-NCE/L-%ATID%
Ji%test_user_sign%/SU-%test_user_pwd%

''Response:
''{.*}A-SIGN COMPLETE{*}

Log
'========================================================================
'> 2.Create a FF profile (Setup)
'========================================================================
'Get in Profile Mode
PM

'Create FF associated to name
PFFC/6X/freq
{=Pax1.book()}

'Add APN
APN-6X/%SMS%

'Check Profile
PER

''Response:
''PROFILE DISPLAY *PROFILE MODE*  ACTIVE                   {*}&
''*F* %Pax1.last_name%/%Pax1.first_name%&
''------- FREQUENT FLYER INFORMATION&
''AIRLINE:6X                 CUSTOMER TYPE:FREQ&
''TIER/PRIORITY:/5           ALLIANCE TIER:&
''EXPIRY DATE:               FF NUMBER:{%FFN%=*}&
''ACV:&
''------- PNR TRANSFERABLE DATA&
''       1  A  NM   %Pax1.last_name%/%Pax1.first_name%&
''       2  A  FFN  6X-{%FFN%=*}-5&
''       3  A  APN  6X/%SMS%&
''END OF DISPLAY&
''*PROFILE MODE*&
''>

'Exit Profile Mode
PME

'========================================================================
'> 3. Sign out
'========================================================================
IG
JO
IG
JD


'========================================================================
'> 4.Sign in TA test office NCE6X31RP (PNR creation)
'========================================================================
'@Action: 
'@Expect: todo

OK-WE/L-%ATID%
''WAIT:3
OK-WY/C-C5AGY/W-AMAD/S-80X22/O-%test_user_office%/T-NCE/A-NCE/L-%ATID%
Ji%test_user_sign%/SU.%DEFAULT_OFFICE2%-%test_user_pwd%

''Response:
''{.*}A-SIGN COMPLETE{*}


'========================================================================
'> 5.Create a PNR with 1pax 1seg + APE, APN, APM
'========================================================================
'@Action:
'@Expect: todo

NM1%Pax1.last_name%/%Pax1.first_name%
{=Flight_1.book(1)}

''Response:
''{.*}RP/%DEFAULT_OFFICE2%/&
''{.*} {=Flight_1.pnr_format('')}{*}&
''{*}


' An airline have to give a Travel Agency office the right to check this PNR or else it would only see "secured PNR"
ES/G%DEFAULT_OFFICE_6X1%-B
TKOK
AP EOS


'Frequent Flyer Number , will lead to add APN airline associated via APU process

APM-%HomeNumber%
APE-%Email%
API-This info line should be visible in OpenPNR
FFN 6X-%FFN%/P1
RF OPENPNR-TEST

'> End-transact & check for completion
ER

''Response:
''--- RLR {*}---&
''RP/%DEFAULT_OFFICE2%/%DEFAULT_OFFICE2%            {*}/{*}  {*}Z   {%recloc%=.{6}}&
''{*}
''NoMatch: TTServer.currentMessage.loop(1, 1, 0)


'========================================================================
'> 6. Sign out
'========================================================================
'@Action: 3. Sign out
'@Expect: todo

IG
JO
JD

'========================================================================
'> 7.Sign in test office retriever 6X airline SYD6X0102 
'========================================================================
'@Action:

OK-WE/L-%ATID%
''WAIT:3
OK-WY/C-C5AGY/W-AMAD/S-80X22/O-%test_user_office%/T-NCE/A-NCE/L-%ATID%
Ji%test_user_sign%/SU.%DEFAULT_OFFICE3%-%test_user_pwd%

''Response:
''{.*}A-SIGN COMPLETE{*}

' to check in which office i am 
JD

'>Retrieve
RT%recloc%
''WAIT:1

''Response:
''--- RLR {*}---&
''RP/%DEFAULT_OFFICE2%/%DEFAULT_OFFICE2%            {*}/{*}  {*}Z   %recloc%&
''{(local).*?AP} EOS&
''{(local).*?APE} SECURED DATA&
''{(local).*?API} THIS INFO LINE SHOULD BE VISIBLE IN OPENPNR&
''{(local).*?APM} SECURED DATA&
''{(local).*?APN} 6X/M+33661845678&
''{*}


''Exec:
# Compose the expected PNR ID used in OpenPNR, e.g. ABC123-2025-05-27
openpnr_id = recloc + '-' + today
''End

IG
JO
JD



'========================================================================
'> 7. Retrieve Open PNR (GET)
'========================================================================

''Conversation: web

GET /%SAP%/v2/open-pnrs/%recloc% HTTP/1.1&
Content-Type: text/plain&
Debug-format: json&
Authorization: 1AAuth %auth_header_airline%&
Element-Concealment: 1&
&

''Response:
''HTTP/1.1 200 OK&
''ama-request-id:{*}&
''content-length:{*}&
''etag:{*}&
''content-type:application/vnd.amadeus+json; charset=utf-8&
''&
''\{&
''    "reference": "%recloc%", &
''    "version": "{*}", &
''    "openPnr": "{%received_protobuf%=.*}"&
''\}
''End of response


'========================================================================
'> 8. Convert base64 Protobuf to JSON (POST)
'========================================================================

''Conversation: web

POST /%SAP%/v2/open-pnrs/conversion?input=protobufBase64&output=json HTTP/1.1&
Debug-Format: debug& 
Content-Type: application/json&
Authorization: 1AAuth %auth_header_airline_2%&
&
\{"openPnr":"%received_protobuf%"\}

''Response:
''HTTP/1.1 200 OK&
''ama-request-id:{*}&
''content-length:{*}&
''etag:1&
''content-type:application/vnd.amadeus+json; charset=utf-8&
''&
''{%received_json%=.*}
''End of response
''Match: validate_openpnr(received_json)


'========================================================================
'> 9. Cancel the PNR and sign out
'========================================================================

'@Action: cancel the PNR itinerary

''Conversation: cry

RT%recloc%
XI
ET
IG

'@Action: sign out

JO
JD