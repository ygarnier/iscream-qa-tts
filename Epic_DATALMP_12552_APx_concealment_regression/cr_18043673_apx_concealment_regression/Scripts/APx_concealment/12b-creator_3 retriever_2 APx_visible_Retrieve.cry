'=========================================================================
'             (C) COPYRIGHT AMADEUS GLOBAL TRAVEL DISTRIBUTION 2019
'
' TEST CASE NAME: office retriever 0_ concealed
' PRODUCT: todo
'
' TEST CASE: 
'   TESTED REQUIREMENT: CR18043673/APx_concealement
'   PREREQUISITE:
'      PNR  (1pax 1segment + APE, APN, APM)
'      
'
'   DESCRIPTION:
'      Goal of this test is to validate that the APx elements are concealed for offices retriever 0 and 1 (airlines) and visible for the others
'   EXPECTATIONS:
'      APx concealed for offices retriever 0 and 1
'      APx visible for offices retrievers 2 to 9
'
'
' 
' -DESIGN steps:
' 1. Sign in TA test office NCE6X31RP
' 2. Create a PNR with 1pax 1seg + APE, APN, APM
' 3. Sign out
' 4. Sign in TA test office NUEL121B4
' 5. Retrieve PNR created in TA office 3 => Check APx
' 6. Sign out
'
'=========================================================================
'initialize - execute (the root and the data file)
''Initialize:
import json
from lib.openpnr import extract_binary_payload
from lib.json_match import assert_equal, assert_found, assert_not_found, parse_json

execfile(global_regression.TTS_RootDir + '/data/data_' + global_regression.TEST_SYSTEM + '.py')

TTS_OK = TTServer.currentMessage.TTS_MATCH_COMPARISON_OK
TTS_KO = TTServer.currentMessage.TTS_MATCH_COMPARISON_FAILURE

# As the specific conditions to evaluate depend on the test, the comparison function is in the individual script
# In case of match error, find the error details in TTS logs (not available in .log or in .rex file)
# Variables defined in data files (e.g., test user data) or in the current scripts (e.g., recloc)
# are directly available from inside the function.
def validate_openpnr(openpnr_json):
    try:
        openpnr = parse_json(openpnr_json)
        for field in ['id', 'reference', 'creation', 'contacts', 'travelers', 'products']:
            assert_found(field, container=openpnr)
        
        expected_openpnr_id = recloc + '-' + today
        assert_equal(actual=openpnr['id'], expected=expected_openpnr_id, item_name='OpenPNR id field')
        assert_not_found('creation/date', container=openpnr)
        assert_found('creation/dateTime', container=openpnr)
        assert_found('creation/pointOfSale/office/id', container=openpnr)
        assert_equal(expected=DEFAULT_OFFICE2, actual=openpnr['creation']['pointOfSale']['office']['id'], item_name='creator office')
        
        #Check data for contacts section
        assert_equal(actual=len(openpnr['contacts']), expected=5, item_name='number of contacts')
        contacts_1 = openpnr['contacts'][0]
        contacts_2 = openpnr['contacts'][1]
        contacts_3 = openpnr['contacts'][2]
        contacts_4 = openpnr['contacts'][3]
        contacts_5 = openpnr['contacts'][4]
        #Check data for AP element
        assert_equal(actual=contacts_1['type'], expected="contact", item_name='contact1 type')
        assert_equal(actual=contacts_1['id'], expected= recloc+"-"+today+"-PNR-AP-4", item_name='contact1 id')
        assert_equal(actual=contacts_1['purpose'], expected= [u'STANDARD'], item_name='contact1 purpose')
        assert_equal(actual=contacts_1['phone']['number'], expected= "EOS", item_name='contact1 phone/number')
        #Check data for APN element
        assert_equal(actual=contacts_2['type'], expected="contact", item_name='contact2 type')
        assert_equal(actual=contacts_2['id'], expected= recloc+"-"+today+"-PNR-AP-5", item_name='contact2 id')
        assert_equal(actual=contacts_2['purpose'], expected= [u'NOTIFICATION'], item_name='contact2 purpose')
        assert_equal(actual=contacts_2['phone']['number'], expected= SMS, item_name='contact2 phone/number')    
        #Check data for APM element
        assert_equal(actual=contacts_3['type'], expected="contact", item_name='contact3 type')
        assert_equal(actual=contacts_3['id'], expected= recloc+"-"+today+"-PNR-AP-6", item_name='contact3 id')
        assert_equal(actual=contacts_3['purpose'], expected= [u'STANDARD'], item_name='contact3 purpose')
        assert_equal(actual=contacts_3['phone']['category'], expected= "PERSONAL", item_name='contact3 phone/category')
        assert_equal(actual=contacts_3['phone']['deviceType'], expected= "MOBILE", item_name='contact3 phone/deviceType')
        assert_equal(actual=contacts_3['phone']['number'], expected= HomeNumber, item_name='contact3 phone/number')
        #Check data for APE element
        assert_equal(actual=contacts_4['type'], expected="contact", item_name='contact4 type')
        assert_equal(actual=contacts_4['id'], expected= recloc+"-"+today+"-PNR-AP-7", item_name='contact4 id')
        assert_equal(actual=contacts_4['email']['address'], expected= Email, item_name='contact4 email/address')
        assert_equal(actual=contacts_4['purpose'], expected= [u'STANDARD'], item_name='contact4 purpose')
        #Check data for API element
        assert_equal(actual=contacts_5['type'], expected="contact", item_name='contact5 type')
        assert_equal(actual=contacts_5['id'], expected= recloc+"-"+today+"-PNR-AP-8", item_name='contact5 id')
        assert_equal(actual=contacts_5['phone']['number'], expected= "THIS INFO LINE SHOULD BE VISIBLE IN OPENPNR", item_name='contact5 phone/number')
        assert_equal(actual=contacts_5['purpose'], expected= [u'INFORMATION'], item_name='contact5 purpose')
        assert_equal(actual=contacts_5['freeFlowFormat'], expected= "THIS INFO LINE SHOULD BE VISIBLE IN OPENPNR", item_name='contact5 purpose')
    


    except Exception as e:
        print('OpenPNR validation failed: {}'.format(e))
        return TTS_KO
    
    print('OpenPNR validation successful')
    return TTS_OK

''End


IG
JO
JD

'========================================================================
'> 1.Sign in the TA test office  DEFAULT_OFFICE2 = NCE6X31RP
'========================================================================
'@Action: 
'@Expect: todo

OK-WE/L-%ATID%
''WAIT:2
OK-WY/C-C5AGY/W-AMAD/S-80X22/O-%test_user_1A_office%/T-NCE/A-NCE/L-%ATID%
Ji%test_user_sign%/SU.%DEFAULT_OFFICE2%-%test_user_pwd%

''Response:
''{.*}A-SIGN COMPLETE{*}


'========================================================================
'> 2.Create a PNR with 1pax 1seg + APE, APN, APM
'========================================================================
'@Action:
'@Expect: todo

{=Pax1.book()}
{=Flight_1.book(1)}

''Response:
''{.*}RP/%DEFAULT_OFFICE2%/&
''{.*} {=Flight_1.pnr_format('')}{*}&
''{*}

' An airline have to give a Travel Agency office the right to check this PNR or else it would only see "secured PNR"
ES/G%DEFAULT_OFFICE_L12%-B, NCE6X21PS-B
TKOK
AP EOS

' SMS, Home number, SMS
APN-%SMS%/p1
APM-%HomeNumber%
APE-%Email%
API-This info line should be visible in OpenPNR

RF OPENPNR-TEST
'> End-transact & check for completion
ER

''Response:
''--- RLR {*}---&
''RP/%DEFAULT_OFFICE2%/%DEFAULT_OFFICE2%            {*}/{*}  {*}Z   {%recloc%=.{6}}&
''{*}
''NoMatch: TTServer.currentMessage.loop(1, 1, 0)


'========================================================================
'> 3. Sign out
'========================================================================
'@Action: 3. Sign out
'@Expect: todo

IG
JO
JD

'========================================================================
'> 4. Sign in TA test office retriever  DEFAULT_OFFICE_L12 = "NUEL121B4"
'========================================================================
'@Action:

OK-WE/L-%ATID%
''WAIT:3
OK-WY/C-C5AGY/W-AMAD/S-80X22/O-%test_user_office%/T-NCE/A-NCE/L-%ATID%
Ji%test_user_sign%/SU.%DEFAULT_OFFICE_L12%-%test_user_pwd%

''Response:
''{.*}A-SIGN COMPLETE{*}

' to check in which office i am 
JD

'========================================================================
'> 5. Retrieve PNR created in TA office
'========================================================================
'@Action: 
'@Expect: todo

'>Retrieve
RT%recloc%

''Response:
''--- RLR {*}---&
''RP/%DEFAULT_OFFICE2%/%DEFAULT_OFFICE2%            {*}/{*}  {*}Z   %recloc%&
''{(local).*?APE} %Email%&
''{(local).*?API} THIS INFO LINE SHOULD BE VISIBLE IN OPENPNR&  
''{(local).*?APM} %HomeNumber%&
''{(local).*?APN} %SMS%&          
''{*}
''NoMatch: TTServer.currentMessage.loop(1, 1, 0)


IG
JO
JD

'========================================================================
'> 6. Sign in with test_user_1A_sign in office test_user_1A_office
'========================================================================
'@Action: Reconfigure terminal

OK-WE/L-%ATID%
''WAIT:2
OK-WY/C-C5AGY/W-AMAD/S-80X22/O-%test_user_1A_office%/T-NCE/A-NCE/L-%ATID%

'@Action: Sign in with extended sign into the 6X office

Jia%test_user_sign%/SU.%test_user_1A_extended_office%-%test_user_pwd% 

''Response:
''{.*}A-SIGN COMPLETE{*}

''Exec:
# Compose the expected PNR ID used in OpenPNR, e.g. ABC123-2025-05-27
openpnr_id = recloc + '-' + today
''End


'========================================================================
'> 7. Retrieve Open PNR (GET)
'========================================================================

''Conversation: web

GET /%SAP%/v2/open-pnrs/%recloc% HTTP/1.1&
Content-Type: text/plain&
Debug-format: json&
Authorization: 1AAuth %auth_header_TA%&
Element-Concealment: 1&
&

''Response:
''HTTP/1.1 200 OK&
''ama-request-id:{*}&
''content-length:{*}&
''etag:{*}&
''content-type:application/vnd.amadeus+json; charset=utf-8&
''&
''\{&
''    "reference": "%recloc%", &
''    "version": "{*}", &
''    "openPnr": "{%received_protobuf%=.*}"&
''\}
''End of response



'========================================================================
'> 8. Convert base64 Protobuf to JSON (POST)
'========================================================================

''Conversation: web

POST /%SAP%/v2/open-pnrs/conversion?input=protobufBase64&output=json HTTP/1.1&
Debug-Format: debug& 
Content-Type: application/json&
Authorization: 1AAuth %auth_header_TA_2%&
&
\{"openPnr":"%received_protobuf%"\}

''Response:
''HTTP/1.1 200 OK&
''ama-request-id:{*}&
''content-length:{*}&
''etag:1&
''content-type:application/vnd.amadeus+json; charset=utf-8&
''&
''{%received_json%=.*}
''End of response
''Match: validate_openpnr(received_json)


'========================================================================
'> 9. Cancel the PNR and sign out
'========================================================================

'@Action: cancel the PNR itinerary

''Conversation: cry

RT%recloc%
XI
ET
IG

'@Action: sign out

JO
JD